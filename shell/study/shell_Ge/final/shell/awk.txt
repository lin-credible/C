3. awk
	是gawk的符号链接, 3位作者的名字的首字母(man awk), 是一门编程语言, 灵活性是awk最大的优势
	awk 'BEGIN{commands}pattern {commands}END{commands}' file1
	BEGIN语句块可选, pattern语句块可选, {}语句块可选, END语句块可选
	
	就像一个用来读取行的while循环, 从第一行读至最后一行, 
	每读一行, 先检查该行与pattern是否匹配, 若匹配, 则执行{}中的语句, 
	然后再读取下一行
	
	工作原理:
	1. 执行BEGIN{commands}语句块中的语句
	2. 从文件或stdin中读取第1行, 然后执行pattern {commands}, 重复这个过程, 直到所有行被读取完毕
	3. 执行END{commands}语句块中的语句
	
	默认以空白作为字段分隔符
	基本结构:
	awk 'BEGIN{commands}pattern {commands}END{commands}' file1
	awk 'BEGIN{print "start..."}{print $1}END{print "end..."}' file1
	awk 'BEGIN{i=0}{i++}END{print i}' file1 #文件总行数, 改为""双引号也可

	awk的基本介绍
	与sed一样, 均是一行一行的读取、处理, sed作用于一整行的处理, 而awk将一行分成数个字段来处理
	默认的字段分隔符为空白
		
	vim file1
	abc def:hij:123:456:xyz:789
	awk -F "[ :]" '{print $1, $2}' file1
	输出abc def
	字段分隔符是正则, 用""引起正则[ :], 防止shell将它解释成shell的元字符
	以空格或:作为字段分隔符, 空格与:一样均为分隔符(:就是空格!)
	
	tom  savege  100
	molly  lee  20
	john  doe  300
	awk '{print $1, $3}' file1
	head -l /etc/passwd | cut -d ":" -f 1-3 #与cut对比一下 -f 1,3,5
	取网关、IP地址
		
	ifconfig -a | grep "^\w" | awk '!/lo/{print $1}'

	echo | awk '{var1="abc"; var2="ijk"; var3=100; print var1, var2, var3}'
	echo | awk '{var1="abc"; var2="ijk"; var3=100; print var1 var2 var3}'
	echo | awk '{var1="abc"; var2="ijk"; var3=100; print var1 "---" var2 "---" var3}'
	
	awk -F: '{print NR, NF, $1, $NF, $(NF-1)}' /etc/passwd
		
	awk -F ":" '{print $1, "lines=" NR, "columns=" NF}' /etc/passwd
	
	awk -F: 'NR==2{print $1}' /etc/passwd

	统计文件的行数:
	awk 'END{print NR}' file1
	
	seq 5 | awk 'BEGIN{sum=0; print "sum:"}{print $1"+"; sum+=$1}END{print "="; print sum}'
	seq 5 | awk '{sum+=$1}END{print sum}'
	
	将外部变量传给awk:
	var=100
	echo | awk -v v1=$var '{print v1}'
	
	var1=10; var2=20
	echo | awk '{print v1, v2}' v1=$var1 v2=$var2 #输入来自stdin
	awk '{print v1, v2}' v1=$var1 v2=$var2 file1 #输入来自file
		
	行过滤:
	awk -F: 'NR==2{print $1}' /etc/passwd
	awk -F: 'NR==2,NR==4{print $1}' /etc/passwd #2至4行
	awk -F: 'NR==2 || NR==4{print $1}' /etc/passwd #第2行和第4行
	awk -F: 'NR<5{print $1}' /etc/passwd
	awk -F: 'NR<=5{print $1}' /etc/passwd
	
	整行与正则匹配
	awk -F: '/root/{print $1}' /etc/passwd
	awk -F: '/^root/{print $1}' /etc/passwd
	awk -F: '!/root/{print $1}' /etc/passwd
	awk -F: '$0 ~ /root/{print $1}' /etc/passwd #相当于这样
	
	另一种写法: 打印匹配行
	awk '/root/' /etc/passwd
	awk '/^root/' /etc/passwd
	
	字段与正则匹配
	awk -F: '$7 !~ /bash/{print $1}' /etc/passwd #~匹配 !~不匹配
	
	设置字段定界符:
	awk -F: '{print $1}' /etc/passwd
	awk 'BEGIN{FS=":"; OFS="---"}{print $1, $NF}' /etc/passwd
	
	awk -F: 'OFS="---"{print $1, $3}' /etc/passwd
	
	awk -F: 'BEGIN{OFS="---"}NR==2{print $1, $3}' /etc/passwwd
	
	awk 'BEGIN{FS=":"; OFS="---"}NR==2{print $1, $3}' /etc/passwd
		
	awk -F: '$1=="root"{print $0}' /etc/passwd
	a=root
	awk -F: -v var=$a  '$1==var{print $0}' /etc/passwd

流程控制
	if
	awk -F: '{if($1=="root") print $1}' /etc/passwd
	awk -F: '{if($1=="root") {print $1; print $6}}' /etc/passwd
	awk -F: '{if($1=="root") print $1; else print $6}' /etc/passwd
	awk -F: '{if($1=="root") print $1; else if($1=="ftp") print $2; else if($1=="mail") print $3; else print NR}' /etc/passwd
	awk -F: '{var=($3>=500)?$1:"sys"; print $1 "\t" $3 "\t" var}' /etc/passwd
	awk -F: '{if($3==0) print $1, "admin"; else if($3>0 && $3<500) print $1, "sys"; else print $1, "user"}' /etc/passwd
	
	BEGIN END的使用
	awk -F: 'BEGIN{i=0}{i++}END{print i}' /etc/passwd
	awk -F: 'BEGIN{print NR, NF}' /etc/passwd #读前处理
	awk -F: 'END{print NR, NF}' /etc/passwd #读后处理
	awk -F: 'BEGIN{i=0}{i+=NF}END{print i}' /etc/passwd
	awk -F: 'BEGIN{i=0}$3>=500{print $1; i++}END{print i}' /etc/passwd #显示所有普通用户及其个数
	
	break
	continue
	next #读取下一行
	exit #不再读取下一行, 读取动作终止, 转为执行end语句块
	
	awk 'BEGIN{for(x=1;x<=5;x++){if(x==3) break; print x}}' #continue
	
	awk -F: '{if(NR>3) next; print $1}END{print NR}' /etc/passwd
	awk -F: '{if(NR>3) exit; print $1}END{print NR}' /etc/passwd
	
	
	循环语句
	for
	awk 'BEGIN{for(x=1; x<=5; x++) print x}'
	awk 'BEGIN{for(i=1;i<=3;i++){for(j=1;j<=5;j++) print i, j}}'
	awk -F: '{for(x=NF;x>0;x--) print $x}' /etc/passwd
	awk -F: '/bash$/{for(x=NF;x>0;x--) printf "%-13s", $x; printf "\n"}' /etc/passwd
	
	
	while
	awk -F: '{while($3<3){print $3, $1; $3++}}' /etc/passwd	
	awk 'BEGIN{i=1; while(i<10){if(i%2==0)print i; i++}}'
	
	
	
	awk中的函数
	awk 'BEGIN{print int(3.14159)}' #取整数部分
	awk 'BEGIN{x="abcdefg"; print substr(x, 4, 3)}'
	awk 'BEGIN{x="abcdefg"; print substr(x, 4)}'
	
	awk 'BEGIN{x="abcdefg"; print length(x)}'
	awk 'NR==2{print length($0)}' /etc/passwd #把$0省略也可
	awk 'BEGIN{x="abcdefg"; print substr(x, length(x), 1)}'
	
	a="abcdefg"
	var=`echo $a | awk '{print substr($0, length($0), 1)}'`
	
	awk 'BEGIN{x="xyzabcxyzabcxyzabc"; sub("abc", "ABC", x); print x}' #sub()改用gsub()
	
	awk读取命令输出(getline, 取得1行)
	awk 'BEGIN{print "Enter number: "; getline NUM; for(i=1;i<=NUM;i++) print i}'
	awk 'BEGIN{"uname -a" | getline; print $3}'
	awk -F: 'BEGIN{while(getline < "/etc/passwd") print $3 "\t" $1}'
	
	echo | awk -F: '{"grep root /etc/passwd" | getline; print $0}' #或打印$1
	echo | awk '{"date" | getline; print $0}'
	
	#########
	
	awk字符串拼接(字符串转数字, 数字转字符串) 
	awk中数据类型是不需要定义的, 是自适应的, 有时候需要强制转换, 我们可以通过下面操作完成

	拼接
	awk 'BEGIN{a=100;b=100;c=a""b; print c}'      
	100100
	awk 'BEGIN{a="aa";b="bb";c=a""b; print c}'      
	aabb

	awk 'BEGIN{a="a";b="b";c=(a+b);print c}'  
	0
	+号操作符强制将左右两边的值转为数字类型, 然后进行操作
	
	#########
	
	
	在awk中使用循环:
	echo | awk '{for(i=0; i<=10; i++) print i}'
	
	awk中的数组:
	echo | awk '{arr["a"]="aa"; arr["b"]="bb"; arr["c"]="cc"; for(i in arr) print i, arr[i]}'
	生成数组
	vim file1
	111
	222
	333
	444
	555
	666
	awk '{arr[x++]=$1}END{for(i=0;i<NR;i++)print arr[i]}' file1
	